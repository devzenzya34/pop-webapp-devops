pipeline {
    agent any
    environment {
        DOCKERFILE_NAME = "Dockerfile"
        DOCKER_DIR = "./webapp"
        DOCKER_IMAGE = "pop-webapp"
        DOCKER_TAG = "1.0"
        DOCKERHUB_ID = "devzenzya34"
        DOCKERHUB_PASSWORD = credentials('dockerhub_pwd')
        PORT_APP = "8080"
        PORT_EXT = "8090"
        IP = "172.17.0.1" //defalut docker ip on linux
    }
    stages {
        stage('Build Image') {
            steps {
                script {
                    sh '''
                        chmod 0755 ./webapp && chmod 0755 ./webapp/* \
                        docker build --no-cache -f ${DOCKER_DIR}/${DOCKERFILE_NAME} -t ${DOCKERHUB_ID}/${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_DIR}/.
                    '''
                }
            }
        }
        // test if image is built
        stage('RUN and TEST') {
            steps {
                script {
                    sh '''
                        docker ps -a | grep -i ${DOCKER_IMAGE} && docker rm -f  ${DOCKER_IMAGE}
                        docker run --name ${DOCKER_IMAGE} -dp $PORT_EXT:$PORT_APP ${DOCKERHUB_ID}/${DOCKER_IMAGE}:${DOCKER_TAG}
                        sleep 10
                        curl -I http://$IP:$PORT_EXT | grep -i "200"
                    '''
                }
            }
        }
        
        stage('Stop and Delete Container') {
            steps{
                script {
                    sh '''
                        docker ps -a | grep -i ${DOCKER_IMAGE} && docker rm -f  ${DOCKER_IMAGE}
                    '''
                }
            }
        }
        stage('Login and Push Image'){
            steps{
                script {
                    // Dockerhub Registry
                    sh '''
                        echo $DOCKERHUB_PASSWORD | docker login -u ${DOCKERHUB_ID} --password-stdin
                        docker push ${DOCKERHUB_ID}/${DOCKER_IMAGE}:${DOCKER_TAG}
                    '''
                    // Github Registry
                    // sh '''
                    //     echo $DOCKERHUB_PASSWORD | docker login ghcr.io -u $DOCKERHUB_ID --password-stdin
                    // '''
                }
            }
        }
        stage('Build EC2_DOCKER'){
            environment{
                AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
            }
            agent {
                docker {
                    image 'jenkins/jnlp-agent-terraform'
                }
            }
            steps{
                script {
                    sh '''
                        mkdir -p ~/.aws
                        echo "[default]" > ~/.aws/credentials
                        echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                        echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
                        chmod 400 ~/.aws/credentials
                        cd ./terraform/
                        terraform init 
                        terraform apply -var="stack_name=docker" -auto-approve
                    '''
                }
            }
        }
        stage('Ansible Deploy on Docker VM') {
            agent {
                docker {
                    image 'registry.gitlab.com/robconnolly/docker-ansible:latest'
                }
            }
            steps {
                script {
                    sh '''
                        cd ./ansible/
                        ansible-playbook playbooks/docker/main.yml
                    '''
                }   
            }
        }
        stage('Destroy EC2_DOCKER'){
            environment{
                AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
            }
            agent {
                docker {
                    image 'jenkins/jnlp-agent-terraform'
                }
            }
            steps{
                script {
                    timeout(time: 30, unit: 'MINUTES') {
                        input message: 'Are you sure you want to destroy the docker instance?', ok: 'Yes'
                    }
                    sh '''
                        mkdir -p ~/.aws
                        echo "[default]" > ~/.aws/credentials
                        echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                        echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
                        chmod 400 ~/.aws/credentials
                        cd ./terraform/
                        terraform destroy -var="stack_name=docker" -auto-approve
                    '''
                }
            }
        }
        stage('Ansible Deploy on K3S VM') {
            agent {
                docker {
                    image 'registry.gitlab.com/robconnolly/docker-ansible:latest'
                }
            }
            steps {
                script {
                    sh '''
                        cd ./ansible/
                        ansible-playbook playbooks/docker/main.yml
                    '''
                }   
            }
        }
        stage('Destroy EC2_KUBERNETES'){
            environment{
                AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key')
            }
            agent {
                docker {
                    image 'jenkins/jnlp-agent-terraform'
                }
            }
            steps{
                script {
                    timeout(time: 30, unit: 'MINUTES') {
                        input message: 'Are you sure you want to destroy the kubernetes instance?', ok: 'Yes'
                    }
                    sh '''
                        mkdir -p ~/.aws
                        echo "[default]" > ~/.aws/credentials
                        echo -e "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
                        echo -e "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
                        chmod 400 ~/.aws/credentials
                        cd ./terraform/
                        terraform destroy -var="stack_name=docker" -auto-approve
                    '''
                }
            }
        }

    }
}
